@model IHSDC.WebApp.Models.CarPcModel

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layoutagi.cshtml";
}

<script src="~/Scripts/search/1.js"></script>
<script src="~/Scripts/search/2.js"></script>
<link href="~/Scripts/search/3.css" rel="stylesheet" />
<script src="~/Scripts/search/4.js"></script>
<script src="~/Scripts/jquery/jquery.min.js"></script>
<link href="~/Content/sweetalert.css" rel="stylesheet" />
<script src="~/Scripts/sweetalert.min.js"></script>


<meta name="viewport" content="width=device-width, initial-scale=1.0">
<style>
    .jconfirm .jconfirm-box-container.jconfirm-no-transition {
        width: fit-content;
    }

    .col-sm-6 {
        margin-left: 0%;
    }

    .jconfirm-title-c {
        text-align: center
    }
</style>
<script type="text/javascript">
    $(document).ready(function () {
        debugger;
        $(function () {
            $('#ApplicationType').change(function (event) {
                event.preventDefault();
                var CAApplication = {
                    Old_Army_No: $('#oldIC').val() + $('#oldprefixnum').val() + $('#oldsufixnum').val(),
                    ApplicationType: $('#ApplicationType').val()
                };
                $.ajax({
                    type: "POST",
                    url: "/Car_PC_Advance_Application/JqAJAX",
                    data: JSON.stringify(CAApplication),
                    dataType: "json",
                    contentType: 'application/json; charset=utf-8',
                    success: function (data) {
                        alert(data.msg);
                    },
                    error: function () {
                        alert("Error occured!!")
                    }
                });
            });
        });
    });
</script>
<script>

    function myFunction() {
        if (event.keyCode == 101) {
            event.returnValue = false;
        }



    }


    function disable() {
        if ($('#Previous_Loan_Purpose').val() == "NO") {
            $("#Amount").prop('disabled', true);
            $("#EMI").prop('disabled', true);
            $("#Previous_Loan_Is_Paid").prop('disabled', true);
        }
        else {
            $("#Amount").prop('disabled', false);
            $("#EMI").prop('disabled', false);
            $("#Previous_Loan_Is_Paid").prop('disabled', false);
        }
    }

    function textChange() {
        var basicSalery = parseInt($('#Basic_Salary').val())

        var cr = basicSalery + parseInt($('#Rank_Grade_Pay').val()) + parseInt($('#MSP').val()) + parseInt($('#NPA_X_Pay').val()) + parseInt($('#Tech_Pay').val()) + parseInt($('#DA').val()) + parseInt($('#TPTL_Pay').val()) + parseInt($('#MISC_Pay').val());

        var debt = parseInt($('#PLI').val()) + parseInt($('#Rev_IT').val()) + parseInt($('#AGIF').val()) + parseInt($('#Income_Tax_Monthly').val()) + parseInt($('#DSOP_AFPP').val()) + parseInt($('#MISC').val())

        $('#Total').val(cr);
        $('#Salary_After_Deduction').val(cr - debt);
    }



    function changeApp(e) {

        if ($('#ApplicationType').val() != "7") {

            $("#CarLoanType").prop('disabled', false);
        }
        else {
            $("#CarLoanType").prop('disabled', true);
        }


    }





</script>


<script>
    function isNumber(evt) {
        var charCode = (evt.which) ? evt.which : evt.keyCode;
        if (charCode > 31 && (charCode < 48 || charCode > 57)) {
            return false;
        }
        return true;
    }


</script>
<style>
    * {
        box-sizing: border-box;
    }

    table {
        width: -webkit-fill-available;
    }

    td {
        padding: 10px;
        border-top: none;
    }

    body {
        background-color: #f1f1f1;
    }

    .regForm {
        background-color: #ffffff;
        margin: 20px;
        font-family: Raleway;
        padding: 20px;
        min-width: 300px;
    }

    h1 {
        text-align: center;
    }

    input {
        padding: 10px;
        width: 100%;
        font-size: 17px;
        font-family: Raleway;
        border: 1px solid #aaaaaa;
    }

        /* Mark input boxes that gets an error on validation: */
        input.invalid {
            background-color: #ffdddd;
        }

    /* Hide all steps by default: */
    .tab {
        display: none;
    }

    button {
        background-color: #4CAF50;
        color: #ffffff;
        border: none;
        padding: 10px 20px;
        font-size: 17px;
        font-family: Raleway;
        cursor: pointer;
    }

        button:hover {
            opacity: 0.8;
        }

    #prevBtn {
        background-color: #bbbbbb;
    }

    /* Make circles that indicate the steps of the form: */
    .step {
        height: 15px;
        width: 15px;
        margin: 0 2px;
        background-color: #bbbbbb;
        border: none;
        border-radius: 50%;
        display: inline-block;
        opacity: 0.5;
    }

        .step.active {
            opacity: 1;
        }

        /* Mark the steps that are finished and valid: */
        .step.finish {
            background-color: #4CAF50;
        }
</style>

@*@using (Html.BeginForm("UploadFile", "Car_PC_Advance_Application", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {

        <div>
            @Html.TextBox("file", "", new { type = "file" }) <br />

            <input type="submit" value="Upload" />

            @ViewBag.Message

        </div>


    }*@

<link href="~/Content/jquery-ui.css" rel="stylesheet" />
<script src="~/Content/jqueryui.js"></script>
<script src="~/Content/jquery-ui.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.unobtrusive-ajax.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.js"></script>

<script src="~/Scripts/globalize/globalize.js"></script>
<script src="~/Scripts/globalize/cultures/globalize.culture.en-GB.js"></script>
<script type="text/javascript">

    $.noConflict();
    jQuery(document).ready(function ($) {


        $(function () {
            $('.monthPicker').datepicker({
                changeMonth: true,
                changeYear: true,
                showButtonPanel: true,
                dateFormat: 'MM yy',
                onClose: function (dateText, inst) {
                    $(this).datepicker('setDate', new Date(inst.selectedYear, inst.selectedMonth, 1));
                }
            });

            function my_date(date_string) {
                var date_components = date_string.split("/");
                var day = date_components[0];
                var month = date_components[1];
                var year = date_components[2];
                return new Date(year, month - 1, day);
            }

            $('#Date_Of_Birth').datepicker({
                changeMonth: true,
                changeYear: true,
                showButtonPanel: true,
                dateFormat: 'dd/mm/yy',
                yearRange: '1900:3000',
                onSelect: function () {
                    var dt = $('#Date_Of_Birth').val();
                    calallser1(dt);
                    var newdt = new Date(my_date(dt));
                    newdt.setFullYear(newdt.getFullYear() + 18);

                    $('#Enrollment_Date').datepicker({
                        changeMonth: true,
                        changeYear: true,
                        showButtonPanel: true,
                        dateFormat: 'dd/mm/yy',
                        minDate: newdt,

                        startDate: '01/01/2010'


                    });
                }
            });



            $('#Promotion_Date').datepicker({
                changeMonth: true,
                changeYear: true,
                showButtonPanel: true,
                dateFormat: 'dd/mm/yy',
                onSelect: function () {
                    var dt = $('#Promotion_Date').val();
                    handler(dt);
                    var newdt = new Date(my_date(dt));
                    newdt.setFullYear(newdt.getFullYear() + 18);

                }
            });

            $('#Retirement_Date').datepicker({
                changeMonth: true,
                changeYear: true,
                showButtonPanel: true,
                dateFormat: 'dd/mm/yy',
                 onSelect: function () {
                    var dt = $('#Promotion_Date').val();
                    handler(dt);
                    var newdt = new Date(my_date(dt));
                    newdt.setFullYear(newdt.getFullYear() + 18);

                }
            });

        });
    });



    //$(window).on('load', function () {

    //});

    function check() {
        $('#month').val(null);
    }
    function enter(val) {
        $('#Old_Army_No').val(val);
    }

    function isNumber(evt) {
        evt = (evt) ? evt : window.event;
        var charCode = (evt.which) ? evt.which : evt.keyCode;
        if (charCode > 31 && (charCode < 48 || charCode > 57)) {
            return false;
        }
        return true;
    }

</script>
<script>
    $(document).ready(function () {

        $('#IC').change(
            function () {
                $('#oldIC').val($('#IC').val());
                $('#oldprefixnum').val($('#prefixnum').val());
                $('#oldsufixnum').val($('#sufixnum').val());
            }

        );

        $("#prefixnum").change(
            function () {
                $('#oldIC').val($("#IC").val());
                $('#oldprefixnum').val($("#prefixnum").val());
                $('#oldsufixnum').val($("#sufixnum").val());
            }

        );

        $("#sufixnum").change(
            function () {

                $('#oldIC').val($("#IC").val());
                $('#oldprefixnum').val($("#prefixnum").val());
                $('#oldsufixnum').val($("#sufixnum").val());
            }

        );

    });
</script>
<script>
    $.noConflict();
    $.alert({
        title: 'Important Note',
        content: '<div><p>1.    After filling up the application form, user is requested to take the print out of the same and get it countersigned by his CO/ OC Unit. After the countersign of CO/OC Unit on application form, user is requested to scan the required document along with the application form and upload it.</p><p>2.  You can check the status of your application by clicking the status link and providing your army number</p></div><div><p>1. आवेदन पत्र भरने के बाद, उपयोगकर्ता से अनुरोध किया जाता है कि वह उसी का प्रिंट आउट ले और उसकी CO / OC इकाई द्वारा काउंटरसाइन करें। आवेदन पत्र पर CO / OC यूनिट के काउंटरसाइन के बाद, उपयोगकर्ता से अनुरोध किया जाता है कि आवेदन पत्र के साथ आवश्यक दस्तावेज को स्कैन करके उसे अपलोड करें।</p><p>2.   आप स्टेटस लिंक पर क्लिक करके और अपना आर्मी नंबर प्रदान करके अपने आवेदन की स्थिति की जांच कर सकते हैं</p></div>',
    });

</script>


<script src="~/Scripts/inputmask.date.extensions.js"></script>
<script src="~/Scripts/inputmask.dependencyLib.js"></script>
<script src="~/Scripts/inputmask.js"></script>

@using (Html.BeginForm("Create", "Car_PC_Advance_Application", FormMethod.Post, new { enctype = "multipart/form-data" }))
{


    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="regForm">
        <div class="tab">
            <h3 style="color:red;">@ViewBag.Message</h3>
            <h1>Personal Details</h1>
            <table class="table table-borderless">

                <tr>
                    <td style="border-top:none;">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Loanee_Name, htmlAttributes: new { @class = "control-label " })
                            <div>
                                @Html.EditorFor(model => model.Loanee_Name, new { htmlAttributes = new { @class = "form-control", @required = "required", @onkeyup = "ValInDataLetter(this)" } })
                                @Html.ValidationMessageFor(model => model.Loanee_Name, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </td>
                    <td style="border-top:none;">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Army_No, htmlAttributes: new { @class = "control-label" })
                            <div style="display: flex;">
                                <div id="dropdown" class="dropdown-content">
                                    <select id="dropdownSelect" name="prefixnum" class="form-control" onchange="calallser(event);">
                                        <option value="0">--Prefix Select--</option>
                                        <option value="IC">IC</option>
                                        <option value="SS">SS</option>
                                        <option value="WS">WS</option>
                                        <option value="SC">SC</option>
                                        <option value="SL">SL</option>
                                        <option value="MR">MR</option>
                                        <option value="MS">MS</option>
                                        <option value="DR">DR</option>
                                        <option value="DS">DS</option>
                                        <option value="NR">NR</option>
                                        <option value="NS">NS</option>
                                        <option value="TC">TC</option>
                                        <option value="JC">JC</option>
                                        <option value="OR">OR</option>
                                    </select>
                                </div>
                                <input maxlength="8" onchange="SetSuffixLetter(this)" onkeypress="return isNumber(event)" size="7" style="border-radius:5px;height:35px;" placeholder="Number" class="col-lg-6" name="IC" type="tel" />
                                <input maxlength="1" size="1" readonly=true style="border-radius:5px;height:35px;" placeholder="Suffix" class="col-lg-3" name="sufixnum" id="SuffixLetter" type="text" />

                            </div>
                        </div>
                    </td>


                    @*<input maxlength="3" size="3" style="border-radius:5px;height:35px;" placeholder="Prefix" class="col-lg-3 valid" name="prefixnum" id="prefixnum" type="text" />*@

                    <td style="border-top:none;">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Old_Army_No, htmlAttributes: new { @class = "control-label " })

                            <div style="display: flex;">
                                <div id="dropdown" class="dropdown-content">
                                    <select id="dropdownSelect1" name="prefixnum" class="form-control" onchange="calallser(event);">
                                        <option value="0">--Prefix Select--</option>
                                        <option value="IC">IC</option>
                                        <option value="SS">SS</option>
                                        <option value="WS">WS</option>
                                        <option value="SC">SC</option>
                                        <option value="SL">SL</option>
                                        <option value="MR">MR</option>
                                        <option value="MS">MS</option>
                                        <option value="DR">DR</option>
                                        <option value="DS">DS</option>
                                        <option value="NR">NR</option>
                                        <option value="NS">NS</option>
                                        <option value="TC">TC</option>
                                        <option value="JC">JC</option>
                                        <option value="JC">OR</option>
                                    </select>
                                </div>
                                @*@Html.TextBoxFor(m => m.ANumber, new { @class = "form-control", @required = true, @onkeypress = "return blockSpecialChar(event)", @onchange = "SetSuffixLetter(this)", @maxlength = "6", @onkeyup = "ValInData(this)" })*@
                                <input maxlength="8" size="7" onchange="SetOldSuffixLetter(this)" onkeypress="return isNumber(event)" style="border-radius:5px;height:35px;" placeholder="Number" class="col-lg-6" name="oldIC" id="oldIC" type="tel" />

                                <input maxlength="1" size="1" style="border-radius:5px;height:35px;" placeholder="Suffix" class="col-lg-3" name="oldsufixnum" id="oldsufixnum" type="text" />
                            </div>


                        </div>
                    </td>

                </tr>

                <tr>
                    <td style="border-top:none;">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Rank, htmlAttributes: new { @class = "control-label " })

                            <div>
                                @Html.DropDownListFor(model => model.Rank, (new IHSDC.WebApp.Models.DropDownClass()).LoadRanks(), "--Select--", new { @data_show_subtext = "true", required = "required", @class = "select form-control", @data_live_search = "true" })
                               
                                @*@Html.DropDownListFor(model => model.Rank, (new IHSDC.WebApp.Models.DropDownClass()).LoadRanks(), "--Select--", new { @data_show_subtext = "true", required = "required", @class = "select form-control", @data_live_search = "true" })*@
                            </div>
                        </div>
                    </td>
                    <td style="border-top:none;">
                        <div class="form-group">

                            @Html.LabelFor(model => model.Regt_Corps, htmlAttributes: new { @class = "control-label " })
                            <div>

                                @Html.DropDownListFor(model => model.Regt_Corps, (new IHSDC.WebApp.Models.DropDownClass()).LoadUnits(), "--Select--", new { @data_show_subtext = "true", required = "required", @class = "select form-control", @data_live_search = "true" })
                                @Html.ValidationMessageFor(model => model.Regt_Corps, "", new { @class = "text-danger" })

                            </div>
                        </div>
                    </td>


                    <td style="border-top:none;">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Unit, htmlAttributes: new { @class = "control-label " })
                            <div>
                                @Html.EditorFor(model => model.Unit, new { htmlAttributes = new { @class = "form-control", @required = "required", @onkeyup = "ValInData(this)" } })
                                @Html.ValidationMessageFor(model => model.Unit, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </td>

                </tr>


                <tr>
                    <td style="border-top:none;">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Next_Fmn_Hq, htmlAttributes: new { @class = "control-label " })
                            <div>
                                @Html.EditorFor(model => model.Next_Fmn_Hq, new { htmlAttributes = new { @class = "form-control", @required = "required", @onkeyup = "ValInData(this)" } })
                                @Html.ValidationMessageFor(model => model.Next_Fmn_Hq, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </td>

                    <td style="border-top:none;">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Unit_Pin, htmlAttributes: new { @class = "control-label " })
                            <div>
                                @Html.EditorFor(model => model.Unit_Pin, new { htmlAttributes = new { @class = "form-control", @required = "required", @onkeyup = "ValInDataNo(this)", @maxlength = "6" } })

                                @Html.ValidationMessageFor(model => model.Unit_Pin, "", new { @class = "text-danger", minlength = "6", maxlength = "6", size = "6" })
                            </div>
                        </div>
                    </td>

                    <td style="border-top:none;">
                        <div class="form-group">

                            @Html.LabelFor(model => model.Unit_Address, htmlAttributes: new { @class = "control-label " })
                            <div>

                                @*@Html.DropDownListFor(model => model.Regt_Corps, (new IHSDC.WebApp.Models.DropDownClass()).LoadUnits(), "--Select--", new { @data_show_subtext = "true", required = "required", @class = "select form-control", @data_live_search = "true" })
                                    @Html.ValidationMessageFor(model => model.Regt_Corps, "", new { @class = "text-danger" })*@

                                @Html.DropDownListFor(model => model.Unit_Address, new List<SelectListItem>
        {
                               new SelectListItem{ Text="--Select--", Value = "0" },
                               new SelectListItem{ Text="c/o 56 APO", Value = "c/o 56 APO" },
                               new SelectListItem{ Text="c/o 99 APO", Value = "c/o 99 APO" },


        }, new { @class = "form-control", onchange = "calallser(event);" })


                            </div>
                        </div>
                    </td>





                </tr>


                <tr>


                    <td style="border-top:none;">
                        <div class="form-group">
                            <label class="control-label">CDA/PAO</label>
                            <div>
                                @Html.EditorFor(model => model.CDA_PAO, new { htmlAttributes = new { @class = "form-control", @required = "required", @onkeyup = "ValInData(this)", @id = "CDA_PAO" } })
                                @Html.ValidationMessageFor(model => model.CDA_PAO, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </td>
                    <td style="border-top:none;">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Date_Of_Birth, htmlAttributes: new { @class = "control-label ", type = "date" })
                            <div>

                                <input type="text" placeholder="dd/mm/yyyy" id="Date_Of_Birth" name="Date_Of_Birth" class="form-control" required="required" />

                                @*@Html.TextBoxFor(model => model.Date_Of_Birth, new { @class = "form-control", onchange = "calculateOfficersRetirementDate(event);",placeholder="dd/mm/yyyy", @required = "required", @onkeyup = "ValInData(this)" })*@

                                @Html.ValidationMessageFor(model => model.Date_Of_Birth, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </td>
                    <td style="border-top:none;">
                        <div class="form-group">
                            <label>Enrollment/Commision Date</label>
                            @*@Html.LabelFor(model => model.Enrollment_Date, htmlAttributes: new { @class = "control-label " })*@
                            <div>
                                <input type="text" placeholder="dd/mm/yyyy" id="Enrollment_Date" name="Enrollment_Date" class="form-control" onchange="handler(event);" required="required" />
                                @*@Html.TextBoxFor(model => model.Enrollment_Date, new { @class = "form-control", onchange = "handler(event);", placeholder = "dd/mm/yyyy", @required = "required" })*@
                                @Html.ValidationMessageFor(model => model.Enrollment_Date, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </td>

                </tr>

                <tr>

                    @*<td style="border-top:none;">
            <div class="form-group">
                <label>Extension of Service in Present Rank</label>
                <div>
                    @Html.DropDownListFor(model => model.Extension_of_Service_in_Present_Rank, new List<SelectListItem>
                    {
                       new SelectListItem{ Text="--Select--", Value = "0" },
                       new SelectListItem{ Text="Yes", Value = "1" },
                       new SelectListItem{ Text="NO", Value = "2" },
                    }, new { @class = "form-control", id = "extensionSelect", onchange = "handleExtensionChange(event);" })

                </div>
                <div id="uploadOption" style="display: none;">
                    @Html.TextBoxFor(model => model.FileUpload, new { type = "file", id = "fileUpload" })
                </div>
            </div>
        </td>*@
                    @*<td style="border-top:none;">
                        <div class="form-group">
                            <label>Extension of Service in Present Rank</label>
                            <div>
                                @Html.DropDownListFor(model => model.Extension_of_Service_in_Present_Rank, new List<SelectListItem>
                                {
                                   new SelectListItem{ Text="--Select--", Value = "0" },
                                   new SelectListItem{ Text="Yes", Value = "1" },
                                   new SelectListItem{ Text="NO", Value = "2" },
                                }, new { @class = "form-control", id = "extensionSelect", onchange = "handleExtensionChange(event);" })

                            </div>
                            <div id="ExtentionfileUpload" style="display: none;">
                                @Html.TextBoxFor(model => model.ExtentionfileUpload, new { type = "file", id = "ExtentionfileUpload" })
                            </div>

                        </div>
                    </td>*@

                    <td style="border-top:none;">
                        <div class="form-group">
                            <label>Extension of Service in Present Rank</label>
                            <div>
                                @Html.DropDownListFor(model => model.Extension_of_Service_in_Present_Rank, new List<SelectListItem>
                                {
                                   new SelectListItem{ Text="--Select--", Value = "0" },
                                   new SelectListItem{ Text="Yes", Value = "1" },
                                   new SelectListItem{ Text="NO", Value = "2" },
                                }, new { @class = "form-control", id = "extensionSelect", onchange = "handleExtensionChange(event);" })

                            </div>
                            <div id="uploadOption" style="display: none;">
                             Change the accept attribute to only accept PDF files 
                            @Html.TextBoxFor(model => model.ExtentionfileUpload, new { type = "file", id = "ExtentionfileUpload", accept = ".pdf" })
            <span id="fileUploadError" style="color: red;"></span>
                             Display error message here 
                            </div>
                        </div>
                    </td>

                    <td style="border-top:none;">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Promotion_Date, htmlAttributes: new { @class = "control-label " })
                            <div>
                                <input type="text" placeholder="dd/mm/yyyy" id="Promotion_Date" name="Promotion_Date" class="form-control" required="required" />
                                @*@Html.TextBoxFor(model => model.Promotion_Date, new { @class = "form-control", placeholder = "dd/mm/yyyy", @required = "required" })*@
                                @Html.ValidationMessageFor(model => model.Promotion_Date, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </td>

                    <td style="border-top:none;">
                        <div class="form-group">
                            <label>Retirement Date Present Rank</label>
                            <div>
                                <input type="text" placeholder="dd/mm/yyyy" id="Retirement_Date" name="Retirement_Date" class="form-control" required="required"  />
                                @Html.ValidationMessageFor(model => model.Retirement_Date, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </td>


                </tr>

                <tr>
                    <td style="border-top:none;">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Year_Of_Service, htmlAttributes: new { @class = "control-label " })
                            <div>
                                @Html.EditorFor(model => model.Year_Of_Service, new { htmlAttributes = new { @class = "form-control", @required = "required", @onkeyup = "ValInData(this)" } })
                                @Html.ValidationMessageFor(model => model.Year_Of_Service, "", new { @class = "text-danger" })
                                <span id="Year_Of_ServiceError" style="color: red;"></span>
                            </div>
                        </div>
                        <label id="mess" name="mess" style="color:red;"></label>
                    </td>
                    <td style="border-top:none;">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Residual_Service, htmlAttributes: new { @class = "control-label " })
                            <div>
                                @Html.EditorFor(model => model.Residual_Service, new { htmlAttributes = new { @class = "form-control", @required = "required", @onkeyup = "ValInData(this)" } })
                                @Html.ValidationMessageFor(model => model.Residual_Service, "", new { @class = "text-danger" })
                                <span id="Residual_ServiceError" style="color: red;"></span>
                            </div>
                        </div>
                    </td>
                    <td style="border-top:none;">
                        <div class="form-group">
                            @Html.LabelFor(model => model.ApplicationType, htmlAttributes: new { @class = "control-label " })
                            @Html.DropDownListFor(model => model.ApplicationType, (new IHSDC.WebApp.Models.DropDownClass()).LoadAppType(), "--Select--", new { @data_show_subtext = "true", required = "required", onchange = "changeApp(event);", @class = "select form-control", @data_live_search = "true" })
                            @Html.ValidationMessageFor(model => model.Unit, "", new { @class = "text-danger" })
                        </div>

                    </td>

                </tr>
                <tr>
                    <td style="border-top:none;">
                        <div class="form-group">
                            @Html.LabelFor(model => model.CarLoanType, htmlAttributes: new { @class = "control-label " })
                            @Html.DropDownListFor(model => model.CarLoanType, (new IHSDC.WebApp.Models.DropDownClass()).LoadLoanType(), "--Select--", new { @data_show_subtext = "true", required = "required", disabled = "disabled", @class = "select form-control", @data_live_search = "true" })
                            @Html.ValidationMessageFor(model => model.Unit, "", new { @class = "text-danger" })
                        </div>

                    </td>
                    <td style="border-top:none;">
                        <div class="form-group">
                            <label>Aadhar No</label>
                            <div>
                                @Html.EditorFor(model => model.AadharNo, new { htmlAttributes = new { @class = "form-control", @required = "required", @onkeyup = "ValInDataNo(this)", @maxlength = "12" } })
                                @Html.ValidationMessageFor(model => model.AadharNo, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </td>
                    <td style="border-top:none;">
                        <div class="form-group">
                            <lable>PAN No</lable>
                            <div>
                                @Html.EditorFor(model => model.PANNo, new { htmlAttributes = new { @class = "form-control", @required = "required", @maxlength = "10", data_inputmask = "'alias': 'AAAAA9999A', 'placeholder': 'AAAAA9999A'" } })
                                @Html.ValidationMessageFor(model => model.PANNo, "", new { @class = "text-danger", minlength = "10", maxlength = "10", size = "10" })
                            </div>
                        </div>
                    </td>
                </tr>
            </table>
        </div>
        <div class="tab">
            <h1>Salary Details</h1>

            <table>
                <tr>

                    <td style="border-top:none;">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Salary_Slip_Month_Year, htmlAttributes: new { @class = "control-label " })
                            <div>

                                @Html.EditorFor(model => model.Salary_Slip_Month_Year, new { htmlAttributes = new { @class = "form-control monthPicker", @required = "required", @onkeyup = "ValInData(this)", onchange = "Validate_Salary_Slip_date(event);" } })
                                @Html.ValidationMessageFor(model => model.Salary_Slip_Month_Year, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </td>


                    <td style="border-top:none;">
                        <div class="form-group">
                            <label class="control-label">CDA(O) A/c No(Offrs only)</label>
                            <div>
                                @Html.EditorFor(model => model.CDA_Account_No, new { htmlAttributes = new { @class = "form-control", @required = "required", @id = "CDA_Account_No", data_inputmask = "'alias': '99/999/999999A', 'placeholder': '99/999/999999A'" } })  @*__/___/_______*@

                                @Html.ValidationMessageFor(model => model.CDA_Account_No, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </td>


                </tr>
                <tr>
                    <td style="border-top:none;">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Basic_Salary, htmlAttributes: new { @class = "control-label " })
                            <div>
                                @Html.EditorFor(model => model.Basic_Salary, new { htmlAttributes = new { @class = "form-control", @required = "required", @onkeyup = "ValInData(this)", onkeypress = "myFunction()", onchange = "textChange()" } })
                                @Html.ValidationMessageFor(model => model.Basic_Salary, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </td>

                    <td style="border-top:none;">
                        <div class="form-group">
                            @Html.LabelFor(model => model.PLI, htmlAttributes: new { @class = "control-label " })
                            <div>
                                @Html.EditorFor(model => model.PLI, new { htmlAttributes = new { @class = "form-control", @required = "required", @onkeyup = "ValInData(this)", onkeypress = "myFunction()", onchange = "textChange()" } })
                                @Html.ValidationMessageFor(model => model.PLI, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </td>



                </tr>

                <tr>
                    <td style="border-top:none;">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Rank_Grade_Pay, htmlAttributes: new { @class = "control-label " })
                            <div>
                                @Html.EditorFor(model => model.Rank_Grade_Pay, new { htmlAttributes = new { @class = "form-control", @required = "required", @onkeyup = "ValInData(this)", onkeypress = "myFunction()", onchange = "textChange()" } })
                                @Html.ValidationMessageFor(model => model.Rank_Grade_Pay, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </td>

                    <td style="border-top:none;">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Rev_IT, htmlAttributes: new { @class = "control-label " })
                            <div>
                                @Html.EditorFor(model => model.Rev_IT, new { htmlAttributes = new { @class = "form-control", @required = "required", @onkeyup = "ValInData(this)", onkeypress = "myFunction()", onchange = "textChange()" } })
                                @Html.ValidationMessageFor(model => model.Rev_IT, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </td>


                </tr>
                <tr>
                    <td style="border-top:none;">
                        <div class="form-group">
                            @Html.LabelFor(model => model.MSP, htmlAttributes: new { @class = "control-label " })
                            <div>
                                @Html.EditorFor(model => model.MSP, new { htmlAttributes = new { @class = "form-control", @required = "required", @onkeyup = "ValInData(this)", onkeypress = "myFunction()", onchange = "textChange()" } })
                                @Html.ValidationMessageFor(model => model.MSP, "", new { @class = "text-danger" })
                            </div>
                        </div>

                    </td>

                    <td style="border-top:none;">
                        <div class="form-group">
                            @Html.LabelFor(model => model.AGIF, htmlAttributes: new { @class = "control-label " })
                            <div>
                                @Html.EditorFor(model => model.AGIF, new { htmlAttributes = new { @class = "form-control", @required = "required", @onkeyup = "ValInData(this)", onkeypress = "myFunction()", onchange = "textChange()" } })
                                @Html.ValidationMessageFor(model => model.AGIF, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </td>



                </tr>
                <tr>
                    <td style="border-top:none;">
                        <div class="form-group">
                            <label class="control-label">NPA/X Pay</label>
                            <div>
                                @Html.EditorFor(model => model.NPA_X_Pay, new { htmlAttributes = new { @class = "form-control", @required = "required", @onkeyup = "ValInData(this)", onkeypress = "myFunction()", onchange = "textChange()" } })
                                @Html.ValidationMessageFor(model => model.NPA_X_Pay, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </td>


                    <td style="border-top:none;">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Income_Tax_Monthly, htmlAttributes: new { @class = "control-label " })
                            <div>
                                @Html.EditorFor(model => model.Income_Tax_Monthly, new { htmlAttributes = new { @class = "form-control", @required = "required", @onkeyup = "ValInData(this)", onkeypress = "myFunction()", onchange = "textChange()" } })
                                @Html.ValidationMessageFor(model => model.Income_Tax_Monthly, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </td>

                </tr>
                <tr>
                    <td style="border-top:none;">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Tech_Pay, htmlAttributes: new { @class = "control-label ", @required = "required", @onkeyup = "ValInData(this)" })
                            <div>
                                @Html.EditorFor(model => model.Tech_Pay, new { htmlAttributes = new { @class = "form-control", @required = "required", @onkeyup = "ValInData(this)", onkeypress = "myFunction()", onchange = "textChange()" } })
                                @Html.ValidationMessageFor(model => model.Tech_Pay, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </td>
                    <td style="border-top:none;">
                        <div class="form-group">
                            <label class="control-label">DSOP/AFPPF</label>
                            <div>
                                @Html.EditorFor(model => model.DSOP_AFPP, new { htmlAttributes = new { @class = "form-control", @required = "required", @onkeyup = "ValInData(this)", onkeypress = "myFunction()", onchange = "textChange()" } })
                                @Html.ValidationMessageFor(model => model.DSOP_AFPP, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </td>


                </tr>



                @*//ajay*@
                <tr>
                    <td style="border-top:none;">
                        <div class="form-group">
                            @Html.LabelFor(model => model.DA, htmlAttributes: new { @class = "control-label " })
                            <div>
                                @Html.EditorFor(model => model.DA, new { htmlAttributes = new { @class = "form-control", @required = "required", @onkeyup = "ValInData(this)", onkeypress = "myFunction()", onchange = "textChange()" } })
                                @Html.ValidationMessageFor(model => model.DA, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </td>
                    <td style="border-top:none;">
                        <div class="form-group">
                            @Html.LabelFor(model => model.MISC, htmlAttributes: new { @class = "control-label " })
                            <div>
                                @Html.EditorFor(model => model.MISC, new { htmlAttributes = new { @class = "form-control", @required = "required", @onkeyup = "ValInData(this)", onkeypress = "myFunction()", onchange = "textChange()" } })
                                @Html.ValidationMessageFor(model => model.MISC, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </td>

                </tr>
                <tr>
                    <td style="border-top:none;">
                        <div class="form-group">
                            @Html.LabelFor(model => model.TPTL_Pay, htmlAttributes: new { @class = "control-label " })
                            <div>
                                @Html.EditorFor(model => model.TPTL_Pay, new { htmlAttributes = new { @class = "form-control", @required = "required", @onkeyup = "ValInData(this)", onkeypress = "myFunction()", onchange = "textChange()" } })
                                @Html.ValidationMessageFor(model => model.TPTL_Pay, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </td>
                    <td style="border-top:none;">
                        <div class="form-group">
                            @Html.LabelFor(model => model.MISC_Pay, htmlAttributes: new { @class = "control-label " })
                            <div>
                                @Html.EditorFor(model => model.MISC_Pay, new { htmlAttributes = new { @class = "form-control", @required = "required", @onkeyup = "ValInData(this)", onkeypress = "myFunction()", onchange = "textChange()" } })
                                @Html.ValidationMessageFor(model => model.MISC_Pay, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </td>
                </tr>
                <tr>
                    <td style="border-top:none;">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Total, htmlAttributes: new { @class = "control-label " })
                            <div>
                                @Html.EditorFor(model => model.Total, new { htmlAttributes = new { @class = "form-control", @required = "required", @onkeyup = "ValInData(this)" } })
                                @Html.ValidationMessageFor(model => model.Total, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </td>

                </tr>
                <tr>
                    <td style="border-top:none;">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Salary_After_Deduction, htmlAttributes: new { @class = "control-label " })
                            <div>
                                @Html.EditorFor(model => model.Salary_After_Deduction, new { htmlAttributes = new { @class = "form-control", @required = "required", @onkeyup = "ValInData(this)" } })
                                @Html.ValidationMessageFor(model => model.Salary_After_Deduction, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </td>
                </tr>

            </table>
        </div>
        <div class="tab">
            <h1>Dealer Details</h1>
            <table>
                <tr>
                    <td style="border-top:none;">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Dealer_Name, htmlAttributes: new { @class = "control-label" })
                            @*<lable class="control-label">Dealer Name</lable>*@
                            <div>
                                @Html.EditorFor(model => model.Dealer_Name, new { htmlAttributes = new { @class = "form-control", @required = "required", @onkeyup = "ValInData(this)" } })
                                @Html.ValidationMessageFor(model => model.Dealer_Name, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </td>
                    <td style="border-top:none;">
                        <div class="form-group">
                            <label>Model Name</label>
                            @*@Html.LabelFor(model => model.Vehicle_Name, htmlAttributes: new { @class = "control-label " })*@
                            <div>
                                @Html.EditorFor(model => model.Vehicle_Name, new { htmlAttributes = new { @class = "form-control", @required = "required", @onkeyup = "ValInData(this)" } })
                                @Html.ValidationMessageFor(model => model.Vehicle_Name, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </td>

                    <td style="border-top:none;">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Veh_Type, htmlAttributes: new { @class = "control-label" })

                            <div>
                                @Html.DropDownListFor(model => model.Veh_Type, new List<SelectListItem>
                           {
                              new SelectListItem{ Text="--Select--", Value = "0" },
                              new SelectListItem{ Text="Petrol/Hybrid", Value = "Petrol/Hybrid" },
                              new SelectListItem{ Text="Diesel", Value = "Diesel" },
                              new SelectListItem{ Text="CNG", Value = "CNG" },
                              new SelectListItem{ Text="Electric", Value = "Electric" },


                           }, new { @class = "form-control", onchange = "calallser(event);" })

                            </div>
                        </div>
                    </td>
                </tr>
                <tr>

                    <td style="border-top:none;">
                        <div class="form-group">
                            <label>Company Name</label>
                            @*@Html.LabelFor(model => model.Vehicle_Make, htmlAttributes: new { @class = "control-label " })*@
                            <div>
                                @Html.EditorFor(model => model.Vehicle_Make, new { htmlAttributes = new { @class = "form-control", @required = "required", @onkeyup = "ValInData(this)" } })
                                @Html.ValidationMessageFor(model => model.Vehicle_Make, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </td>
                    <td style="border-top:none;">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Total_Cost, htmlAttributes: new { @class = "control-label " })
                            <div>
                                @Html.EditorFor(model => model.Total_Cost, new { htmlAttributes = new { @class = "form-control", @required = "required", @onkeyup = "ValInData(this)", onkeypress = "myFunction()" } })
                                @Html.ValidationMessageFor(model => model.Total_Cost, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </td>

                </tr>
            </table>
        </div>

        <div class="tab">
            <h1>Loan Details:</h1>
            <table>
                <tr>
                    <td style="border-top:none;">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Amt_Eligible_for_loan, htmlAttributes: new { @class = "control-label " })
                            <div>
                                @Html.EditorFor(model => model.Amt_Eligible_for_loan, new { htmlAttributes = new { @class = "form-control", @required = "required", @onkeyup = "ValInData(this)", onkeypress = "myFunction()" } })
                                @Html.ValidationMessageFor(model => model.Amt_Eligible_for_loan, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </td>
                    <td style="border-top:none;">
                        <div class="form-group">
                            @Html.LabelFor(model => model.EMI_Eligible_for_loan, htmlAttributes: new { @class = "control-label " })
                            <div>
                                @Html.EditorFor(model => model.EMI_Eligible_for_loan, new { htmlAttributes = new { @class = "form-control", @required = "required", @onkeyup = "ValInData(this)", onkeypress = "myFunction()", @maxlength = "2" } })
                                @Html.ValidationMessageFor(model => model.EMI_Eligible_for_loan, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </td>

                    <td style="border-top:none;">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Loan_amount_admissible, htmlAttributes: new { @class = "control-label " })
                            <div>
                                @Html.EditorFor(model => model.Loan_amount_admissible, new { htmlAttributes = new { @class = "form-control", @required = "required", @onkeyup = "ValInData(this)", onkeypress = "myFunction()", @maxlength = "2" } })
                                @Html.ValidationMessageFor(model => model.Loan_amount_admissible, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </td>

                </tr>
                <tr>
                    <td style="border-top:none;">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Amount_Applied_For_Loan, htmlAttributes: new { @class = "control-label " })
                            <div>
                                @Html.EditorFor(model => model.Amount_Applied_For_Loan, new { htmlAttributes = new { @class = "form-control", @required = "required", @onkeyup = "ValInData(this)", onkeypress = "myFunction()" } })
                                @Html.ValidationMessageFor(model => model.Amount_Applied_For_Loan, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </td>
                    <td style="border-top:none;">
                        <div class="form-group">
                            @Html.LabelFor(model => model.No_Of_EMI_Applied, htmlAttributes: new { @class = "control-label " })
                            <div>
                                @Html.EditorFor(model => model.No_Of_EMI_Applied, new { htmlAttributes = new { @class = "form-control", @required = "required", @onkeyup = "ValInData(this)", onkeypress = "myFunction()", @maxlength = "2" } })
                                @Html.ValidationMessageFor(model => model.No_Of_EMI_Applied, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </td>
                </tr>


            </table>
        </div>
        <div class="tab">
            <h1>Address Details</h1>
            <table>
                <tr>
                    <td style="border-top:none;">
                        <div class="form-group">
                            <label class="control-label">Permanent_Addr_Line1</label>
                            @*@Html.LabelFor(model => model.Pers_Address_Line1, htmlAttributes: new { @class = "control-label " })*@
                            <div>
                                @Html.EditorFor(model => model.Pers_Address_Line1, new { htmlAttributes = new { @class = "form-control", @required = "required", @onkeyup = "ValInData(this)" } })
                                @Html.ValidationMessageFor(model => model.Pers_Address_Line1, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </td>
                    <td style="border-top:none;">
                        <div class="form-group">

                            <label class="control-label">Permanent_Addr_Line2</label>

                            @*@Html.LabelFor(model => model.Pers_Address_Line2, htmlAttributes: new { @class = "control-label " })*@
                            <div>
                                @Html.EditorFor(model => model.Pers_Address_Line2, new { htmlAttributes = new { @class = "form-control", @required = "required", @onkeyup = "ValInData(this)" } })
                                @Html.ValidationMessageFor(model => model.Pers_Address_Line2, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </td>
                    <td style="border-top:none;">
                        <div class="form-group">

                            <label class="control-label">Permanent_Addr_Line3</label>

                            @*@Html.LabelFor(model => model.Pers_Address_Line3, htmlAttributes: new { @class = "control-label " })*@
                            <div>
                                @Html.EditorFor(model => model.Pers_Address_Line3, new { htmlAttributes = new { @class = "form-control", @required = "required", @onkeyup = "ValInData(this)" } })
                                @Html.ValidationMessageFor(model => model.Pers_Address_Line3, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </td>
                </tr>
                <tr>
                    <td style="border-top:none;">
                        <div class="form-group">

                            <label class="control-label">Permanent_Addr_Line4</label>

                            @*@Html.LabelFor(model => model.Pers_Address_Line4, htmlAttributes: new { @class = "control-label " })*@
                            <div>
                                @Html.EditorFor(model => model.Pers_Address_Line4, new { htmlAttributes = new { @class = "form-control", @required = "required", @onkeyup = "ValInData(this)" } })
                                @Html.ValidationMessageFor(model => model.Pers_Address_Line4, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </td>
                    <td style="border-top:none;">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Pin_Code, htmlAttributes: new { @class = "control-label " })
                            <div>
                                @Html.EditorFor(model => model.Pin_Code, new { htmlAttributes = new { @class = "form-control", @required = "required", @onkeyup = "ValInData(this)", onkeypress = "myFunction()" } })
                                @Html.ValidationMessageFor(model => model.Pin_Code, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </td>

                </tr>


            </table>
        </div>
        <div class="tab">
            <h1>Payee Account Details</h1>
            <table>
                <tr>
                    <td style="border-top:none;">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Payee_Account_No, htmlAttributes: new { @class = "control-label " })
                            <div>
                                @Html.EditorFor(model => model.Payee_Account_No, new { htmlAttributes = new { @class = "form-control", type = "number", @required = "required", @maxlength = "16", @onkeyup = "ValInData(this)", onkeypress = "myFunction()" } })
                                @Html.ValidationMessageFor(model => model.Payee_Account_No, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </td>
                    <td style="border-top:none;">
                        <div class="form-group">
                            @Html.LabelFor(model => model.IFSC_Code, htmlAttributes: new { @class = "control-label " })
                            <div>
                                @Html.EditorFor(model => model.IFSC_Code, new { htmlAttributes = new { @class = "form-control", @required = "required", data_inputmask = "'alias': 'AAAA9999999', 'placeholder': 'AAAA9999999'" } })
                                @Html.ValidationMessageFor(model => model.IFSC_Code, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </td>
                    <td style="border-top:none;">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Mobile_No, htmlAttributes: new { @class = "control-label " })
                            <div>
                                @Html.EditorFor(model => model.Mobile_No, new { htmlAttributes = new { @class = "form-control", type = "number", @required = "required", @onkeyup = "ValInData(this)", @maxlength = "10", onkeypress = "myFunction()" } })
                                @Html.ValidationMessageFor(model => model.Mobile_No, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </td>
                </tr>
                <tr>
                    <td style="border-top:none;">
                        <div class="form-group">
                            @Html.LabelFor(model => model.E_Mail_Id, htmlAttributes: new { @class = "control-label " })
                            <div>
                                @Html.EditorFor(model => model.E_Mail_Id, new { htmlAttributes = new { @class = "form-control", @required = "required" } })   @*, @onkeyup = "ValInData1(this)"*@
                                @Html.ValidationMessageFor(model => model.E_Mail_Id, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </td>
                    <td style="border-top:none;">
                        <div class="form-group">
                            <label>Previous Loan Taken from AGIF</label>
                            @*@Html.LabelFor(model => model.Previous_Loan_Purpose, htmlAttributes: new { @class = "control-label " })*@
                            <div>
                                @Html.DropDownListFor(model => model.Previous_Loan_Purpose, (new IHSDC.WebApp.Models.DropDownClass()).LoadPreType(), "--Select--", new { @data_show_subtext = "true", onchange = "disable()", required = "required", @class = "select form-control", @data_live_search = "true" })
                                @Html.ValidationMessageFor(model => model.Previous_Loan_Purpose, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </td>
                    <td style="border-top:none;">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Amount, htmlAttributes: new { @class = "control-label " })
                            <div>
                                @Html.EditorFor(model => model.Amount, new { htmlAttributes = new { @class = "form-control", @required = "required", @onkeyup = "ValInData(this)", onkeypress = "myFunction()" } })
                                @Html.ValidationMessageFor(model => model.Amount, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </td>

                </tr>

                <tr>
                </tr>
                <tr>
                    <td style="border-top:none;">
                        <div class="form-group">
                            @Html.LabelFor(model => model.EMI, htmlAttributes: new { @class = "control-label " })
                            <div>
                                @Html.EditorFor(model => model.EMI, new { htmlAttributes = new { @class = "form-control", @required = "required", @onkeyup = "ValInData(this)", onkeypress = "myFunction()" } })
                                @Html.ValidationMessageFor(model => model.EMI, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </td>
                    <td style="border-top:none;">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Previous_Loan_Is_Paid, htmlAttributes: new { @class = "control-label " })
                            <div>

                                <select id="Previous_Loan_Is_Paid" name="Previous_Loan_Is_Paid" class="form-control">
                                    <option value="Yes">Yes</option>
                                    <option value="No">No</option>
                                </select>
                                @*@Html.EditorFor(model => model.Previous_Loan_Is_Paid, new { htmlAttributes = new { @class = "form-control", @required = "required", @onkeyup = "ValInData(this)" } })
                                    @Html.ValidationMessageFor(model => model.Previous_Loan_Is_Paid, "", new { @class = "text-danger" })*@
                            </div>
                        </div>
                    </td>
                </tr>
            </table>

        </div>
        <div style="overflow:auto;">
            <div style="float:right;">
                <button type="button" id="prevBtn" onclick="nextPrev(-1)">Previous</button>
                <button type="button" id="nextBtn" onclick="nextPrev(1)">Next</button>
                <button type="submit" style="display:none;" id="create" value="Create">Submit</button>
                <button type="button" id="DataFill" value="DataFill">Demo data fill</button>
            </div>
        </div>
        <!-- Circles which indicates the steps of the form: -->
        <div style="text-align:center;margin-top:40px;">
            <span class="step"></span>
            <span class="step"></span>
            <span class="step"></span>
            <span class="step"></span>
            <span class="step"></span>
            <span class="step"></span>
        </div>
    </div>
}

@*<script>
        Inputmask().mask("CDA_Account_No");
    </script>*@
<script>
    Inputmask("99/999/999999A", {
        definitions: {
            'A': {
                validator: "[A-Za-z]",
                cardinality: 1,
                casing: "upper" // optional, forces the letter to be uppercase
            }
        }
    }).mask(document.getElementById("CDA_Account_No"));
    Inputmask("AAAAA9999A", {
        definitions: {
            'A': {
                validator: "[A-Za-z]",
                cardinality: 1,
                casing: "upper" // optional, forces the letter to be uppercase
            }
        }
    }).mask(document.getElementById("PANNo"));
    Inputmask("AAAA9999999", {
        definitions: {
            'A': {
                validator: "[A-Za-z]",
                cardinality: 1,
                casing: "upper" // optional, forces the letter to be uppercase
            }
        }
    }).mask(document.getElementById("IFSC_Code"));
</script>

<script src="~/Content/CustomJS/Create.js"></script>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
